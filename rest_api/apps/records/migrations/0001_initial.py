# -*- coding: utf-8 -*-
# Generated by Django 1.11.17 on 2020-02-07 15:11
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('machines', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='LinuxInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mounts', models.TextField(default='null', help_text='mounts', verbose_name='mounts')),
                ('cpuinfo', models.TextField(default='null', help_text='cpuinfo', verbose_name='cpuinfo')),
                ('sysctl', models.TextField(default='null', help_text='sysctl', verbose_name='sysctl')),
                ('meminfo', models.TextField(default='null', help_text='meminfo', verbose_name='meminfo')),
            ],
            options={
                'verbose_name': 'linux info',
                'verbose_name_plural': 'linux info',
            },
        ),
        migrations.CreateModel(
            name='MetaInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(help_text='date', verbose_name='date')),
                ('uname', models.TextField(help_text='uname', verbose_name='uname')),
                ('benchmark', models.TextField(help_text='benchmark', verbose_name='benchmark')),
                ('name', models.TextField(help_text='name', verbose_name='name')),
            ],
            options={
                'verbose_name': 'meta info',
                'verbose_name_plural': 'meta info',
            },
        ),
        migrations.CreateModel(
            name='PGInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('checkpoint_timeout', models.CharField(help_text='checkpoint_timeout', max_length=32, verbose_name='checkpoint_timeout')),
                ('log_temp_files', models.IntegerField(help_text='log_temp_files', verbose_name='log_temp_files')),
                ('work_mem', models.CharField(help_text='work_mem', max_length=32, verbose_name='work_mem')),
                ('log_line_prefix', models.CharField(help_text='checkpoint_timeout', max_length=64, verbose_name='checkpoint_timeout')),
                ('shared_buffers', models.CharField(help_text='shared_buffers', max_length=32, verbose_name='shared_buffers')),
                ('log_autovacuum_min_duration', models.IntegerField(help_text='log_autovacuum_min_duration', verbose_name='log_autovacuum_min_duration')),
                ('checkpoint_completion_target', models.DecimalField(decimal_places=4, help_text='checkpoint_completion_target', max_digits=8, verbose_name='checkpoint_completion_target')),
                ('maintenance_work_mem', models.CharField(help_text='maintenance_work_mem', max_length=32, verbose_name='maintenance_work_mem')),
                ('log_checkpoints', models.IntegerField(choices=[(1, 'on'), (2, 'off')], help_text='log_checkpoints', verbose_name='log_checkpoints')),
                ('max_wal_size', models.CharField(help_text='max_wal_size', max_length=32, verbose_name='max_wal_size')),
                ('min_wal_size', models.CharField(help_text='min_wal_size', max_length=32, verbose_name='min_wal_size')),
            ],
            options={
                'verbose_name': 'pg info',
                'verbose_name_plural': 'pg info',
            },
        ),
        migrations.CreateModel(
            name='TestBranch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('branch_name', models.CharField(help_text='branch name', max_length=128, unique=True, verbose_name='branch name')),
                ('branch_order', models.IntegerField(default=5, help_text='order in all the  branch', verbose_name='branch order')),
                ('is_show', models.BooleanField(default=True, help_text='branch isshow', verbose_name='branch is shown')),
                ('is_accept', models.BooleanField(default=True, help_text='branch accepts new reports', verbose_name='branch accepts new reports')),
                ('add_time', models.DateTimeField(default=django.utils.timezone.now, help_text='branch added time', verbose_name='branch added time')),
            ],
            options={
                'verbose_name': 'test branch',
                'verbose_name_plural': 'test branch',
            },
        ),
        migrations.CreateModel(
            name='TestCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cate_name', models.CharField(help_text='cate name', max_length=64, verbose_name='cate name')),
                ('cate_sn', models.CharField(help_text='cate sn', max_length=32, unique=True, verbose_name='cate sn')),
                ('cate_order', models.IntegerField(help_text='order in the current level', verbose_name='cate order')),
                ('add_time', models.DateTimeField(default=django.utils.timezone.now, help_text='category added time', verbose_name='add time')),
            ],
            options={
                'verbose_name': 'tests category',
                'verbose_name_plural': 'tests category',
            },
        ),
        migrations.CreateModel(
            name='TestDataSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('clients', models.IntegerField(help_text='clients of the test dataset', verbose_name='clients')),
                ('scale', models.IntegerField(help_text='scale of the test dataset', verbose_name='scale')),
                ('std', models.DecimalField(decimal_places=8, help_text='std of the test dataset', max_digits=18, verbose_name='std')),
                ('metric', models.DecimalField(decimal_places=8, help_text='metric of the test dataset', max_digits=18, verbose_name='metric')),
                ('median', models.DecimalField(decimal_places=8, help_text='median of the test dataset', max_digits=18, verbose_name='median')),
                ('status', models.IntegerField(choices=[(-1, 'none'), (1, 'improved'), (2, 'quo'), (3, 'regressive')], help_text='status of this dataset', verbose_name='status')),
                ('percentage', models.DecimalField(decimal_places=4, help_text='percentage compared to previous dataset', max_digits=8, verbose_name='percentage')),
                ('add_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='test dataset time')),
                ('prev', models.ForeignKey(blank=True, help_text='previous test dataset id', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='prev1', to='records.TestDataSet', verbose_name='previous test dataset id')),
                ('test_cate', models.ForeignKey(help_text='test cate id', on_delete=django.db.models.deletion.CASCADE, to='records.TestCategory', verbose_name='test cate id')),
            ],
            options={
                'verbose_name': 'test dataset',
                'verbose_name_plural': 'test dataset',
            },
        ),
        migrations.CreateModel(
            name='TestRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_desc', models.TextField(help_text='test desc', verbose_name='test desc')),
                ('meta_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='meta time')),
                ('hash', models.CharField(default='', help_text='record hash', max_length=128, unique=True, verbose_name='record hash')),
                ('uuid', models.CharField(default='', help_text='record uuid', max_length=64, unique=True, verbose_name='record uuid')),
                ('commit', models.CharField(help_text='record commit', max_length=64, verbose_name='record commit')),
                ('add_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='test added time')),
                ('branch', models.ForeignKey(help_text='pg branch', on_delete=django.db.models.deletion.CASCADE, to='records.TestBranch', verbose_name='pg branch')),
                ('linux_info', models.ForeignKey(help_text='linux info', on_delete=django.db.models.deletion.CASCADE, to='records.LinuxInfo', verbose_name='linux info')),
                ('meta_info', models.ForeignKey(help_text='meta info', on_delete=django.db.models.deletion.CASCADE, to='records.MetaInfo', verbose_name='meta info')),
                ('pg_info', models.ForeignKey(help_text='pg info', on_delete=django.db.models.deletion.CASCADE, to='records.PGInfo', verbose_name='pg info')),
                ('test_machine', models.ForeignKey(help_text='person who add this test item', on_delete=django.db.models.deletion.CASCADE, to='machines.Machine', verbose_name='test owner')),
            ],
            options={
                'verbose_name': 'tests',
                'verbose_name_plural': 'tests',
            },
        ),
        migrations.CreateModel(
            name='TestResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latency', models.IntegerField(help_text='latency of the test result', verbose_name='latency')),
                ('scale', models.IntegerField(help_text='scale of the test result', verbose_name='scale')),
                ('end', models.DecimalField(decimal_places=12, help_text='endtime of the test result', max_digits=32, verbose_name='end')),
                ('clients', models.IntegerField(help_text='clients of the test result', verbose_name='clients')),
                ('start', models.DecimalField(decimal_places=12, help_text='starttime of the test result', max_digits=32, verbose_name='start')),
                ('tps', models.DecimalField(decimal_places=6, default=0, help_text='tps of the test result', max_digits=18, verbose_name='tps')),
                ('run', models.IntegerField(help_text='run number', verbose_name='run')),
                ('threads', models.IntegerField(help_text='threads of the test result', verbose_name='threads')),
                ('mode', models.IntegerField(choices=[(1, 'simple'), (2, 'other'), (-1, 'test')], help_text='test mode', verbose_name='mode')),
                ('add_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='test result added time')),
                ('test_dataset', models.ForeignKey(help_text='test dataset id', on_delete=django.db.models.deletion.CASCADE, to='records.TestDataSet', verbose_name='test dataset id')),
            ],
            options={
                'verbose_name': 'test result',
                'verbose_name_plural': 'test result',
            },
        ),
        migrations.AddField(
            model_name='testdataset',
            name='test_record',
            field=models.ForeignKey(help_text='test record id', on_delete=django.db.models.deletion.CASCADE, to='records.TestRecord', verbose_name='test record id'),
        ),
    ]
